require 'rails_helper'


RSpec.describe VacanciesController, :type => :controller do

	def valid_attributes
	  {
	    :name => "Ruby developer",
	    :validity_period=> 12,
	    :salary => 1200,
	    :contact_information => "Kharkiv, 096 7325689"
	  }
	end	

	def valid_session
	  {
	    :name => "Ruby developer",
	    :validity_period=> 12,
	    :salary => 1200,
	    :contact_information => "Kharkiv, 096 7325689"
	  }
	end	

	def invalid_attributes
	  {
	    :name => "Ruby developer",
	    :validity_period=> 14,
	    :salary => "AsW",
	    :contact_information => 123
	  }
	end		



	describe "GET index" do
		it "assigns all vacancies as @vacancies" do
			vacancy = Vacancy.create! valid_attributes
			get :index, {}, valid_session
			expect(assigns(:vacancies)).to eq([vacancy])
		end
	end

	describe "GET show" do
		it "assigns the requested vacancy as @vacancy" do
			vacancy = Vacancy.create! valid_attributes
			get :show, {:id => vacancy.to_param}, valid_session
			expect(assigns(:vacancy)).to eq(vacancy)
		end
	end	

	describe "GET new" do
		it "assigns a new vacancy as @vacancy" do
			get :new, {}, valid_session
			expect(assigns(:vacancy)).to be_a_new(Vacancy)
		end
	end

	describe "GET edit" do
		it "assigns the requested vacancy as @vacancy" do
			vacancy = Vacancy.create! valid_attributes
			get :edit, {:id => vacancy.to_param}, valid_session
			expect(assigns(:vacancy)).to eq(vacancy)
		end
	end	

	describe "POST create" do
		describe "with valid params" do
			it "creates a new Vacancy" do
				expect {
				post :create, {:vacancy => valid_attributes}, valid_session
				}.to change(Vacancy, :count).by(1)
			end
			it "assigns a newly created vacancy as @vacancy" do
				post :create, {:vacancy => valid_attributes}, valid_session
				expect(assigns(:vacancy)).to be_a(Vacancy)
				expect(assigns(:vacancy)).to be_persisted
			end
			it "redirects to the created vacancy" do
				post :create, {:vacancy => valid_attributes}, valid_session
				expect(response).to redirect_to(Vacancy.last)
			end
		end
		describe "with invalid params" do
			it "assigns a newly created but unsaved vacancy as @vacancy" do
				expect(Vacancy.new.save).to eq(false)
				expect {
				post :create, {:vacancy => invalid_attributes}, valid_session
				}.to change(Vacancy, :count).by(0)				
			end
			it "re-renders the 'new' template" do
				expect(Vacancy.new.save).to eq(false)
				post :create, {:vacancy => invalid_attributes}, valid_session
				expect(response).to render_template("new")
			end
		end
	end

	describe "PUT update" do
		describe "with valid params" do
			it "updates the requested vacancy" do
				vacancy = Vacancy.create! valid_attributes
				# Assuming there are no other vacancies in the database, this
				# specifies that the Vacancy created on the previous line
				# receives the :update_attributes message with whatever params are
				# submitted in the request.
				#Vacancy.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
				vacancy.should_receive(:update_attributes).with(valid_attributes)
				#put :update, {:id => vacancy.to_param, :vacancy => {'these' => 'params'}}, valid_session
			end
			it "assigns the requested vacancy as @vacancy" do
				vacancy = Vacancy.create! valid_attributes
				put :update, {:id => vacancy.to_param, :vacancy => valid_attributes}, valid_session
				assigns(:vacancy).should eq(vacancy)
			end
			it "redirects to the vacancy" do
				vacancy = Vacancy.create! valid_attributes
				put :update, {:id => vacancy.to_param, :vacancy => valid_attributes}, valid_session
				response.should redirect_to(vacancy)
			end
		end
=begin		
		describe "with invalid params" do
			it "assigns the vacancy as @vacancy" do
				vacancy = Vacancy.create! valid_attributes
				# Trigger the behavior that occurs when invalid params are submitted
				Vacancy.any_instance.stub(:save).and_return(false)
				put :update, {:id => vacancy.to_param, :vacancy => {}}, valid_session
				assigns(:vacancy).should eq(vacancy)
			end
			it "re-renders the 'edit' template" do
				vacancy = Vacancy.create! valid_attributes
				# Trigger the behavior that occurs when invalid params are submitted
				Vacancy.any_instance.stub(:save).and_return(false)
				put :update, {:id => vacancy.to_param, :vacancy => {}}, valid_session
				response.should render_template("edit")
			end
		end
=end		
	end		
end